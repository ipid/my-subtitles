[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Video File: ?dummy:59.850000:1000:1920:1080:143:143:143:
Video AR Value: 1.777778
Video Zoom Percent: 0.500000
Active Line: 2

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default-furigana,Arial,24,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,1,2,10,10,10,1
Style: Default,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,code once,function getAllKeys(tbl);    --[[ Create an array with name `output` ]];    local output = {};;    for k, v in _G.pairs(tbl) do;        --[[ Append k to the array `output` ]];        output[#output + 1] = _G.string.format('%s: %s', k, _G.type(v));    end;;    return _G.table.concat(output, ", ");end
Comment: 0,0:00:00.00,0:00:05.00,Default,,0,0,0,code once,function float2str(fl) return _G.string.format('%f', fl) end
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,code once,function getSubsTable() local level = 1 while _G.debug.getinfo(level) ~= nil do local i = 1 while true do local name, value = _G.debug.getlocal(level, i) if name == 'subs' then return value elseif name == nil then break end i = i + 1 end level = level + 1 end return nil end function getAllDialogueLines() local subs = getSubsTable() local output = {} for i = 1, #subs do local l = subs[i] if _G.type(l.start_time) == 'number' and _G.type(l.end_time) == 'number' and ((l.effect == '' and l.comment == false) or (l.effect:match('[Kk]araoke') and l.comment)) then local startFrame = _G.aegisub.frame_from_ms(l.start_time) local endFrame = _G.aegisub.frame_from_ms(l.end_time) if startFrame < endFrame then --[[output[#output + 1] = { startFrame = startFrame, endFrame = endFrame, }]] output[#output + 1] = _G.string.format("#%d: startFrame = %d, endFrame = %d", #output + 1, startFrame, endFrame) end end end return _G.table.concat(output, '\n') end _G.error(getAllDialogueLines())
Comment: 0,0:00:05.00,0:00:08.00,Default,,0,0,0,template line,getAllKeys(_G.getfenv()): !getAllKeys(_G.getfenv())!
Comment: 0,0:00:05.00,0:00:08.00,Default,,0,0,0,template line,getAllKeys(_G): !getAllKeys(_G)!
Comment: 0,0:00:05.00,0:00:08.00,Default,,0,0,0,template line,getAllKeys(_G.aegisub): !getAllKeys(_G.aegisub)!
Comment: 0,0:00:05.00,0:00:08.00,Default,,0,0,0,template line,getAllKeys(_G.aegisub): !getAllKeys(_G.aegisub)!
Comment: 0,0:00:08.00,0:00:11.00,Default,,0,0,0,karaoke,
Dialogue: 0,0:00:08.00,0:00:11.00,Default,,0,0,0,fx,getAllKeys(_G.getfenv()): getSubsTable: function, getAllDialogueLines: function, basesyl: table, remember_line: function, line: table, getAllKeys: function, retime: function, tenv: table, remember_syl: function, orgline: table, maxloop: function, float2str: function, loopctl: function, j: number, remember_if: function, maxj: number, remember: function, restyle: function, math: table, remember_basesyl: function, recall: table, _G: table, fxgroup: table, maxloops: function, syl: table, string: table, meta: table, relayer: function
Dialogue: 0,0:00:08.00,0:00:11.00,Default,,0,0,0,fx,getAllKeys(_G): assert: function, ass_style_color: function, tostring: function, interpolate: function, tonumber: function, io: table, rawget: function, parse_template: function, filter_apply_templates: function, template_loop: function, ipairs: function, print: function, karaskel: table, gcinfo: function, module: function, unicode: table, include: function, rawset: function, clamp: function, rawequal: function, script_description: string, _VERSION: string, next: function, HSL_to_RGB: function, os: table, load: function, rawlen: function, type: function, set_ctx_syl: function, inter: userdata, HSV_to_RGB: function, coroutine: table, aegisub: table, xpcall: function, extract_color: function, script_name: string, alpha_from_style: function, jit: table, is_syl_blank: function, interpolate_color: function, ass_alpha: function, interpolate_alpha: function, template_modifiers: table, macro_can_template: function, bit: table, parse_code: function, run_code_template: function, setfenv: function, ass_color: function, script_author: string, apply_templates: function, f: function, apply_syllable_templates: function, run_text_template: function, pairs: function, script_version: string, matching_templates: function, table: table, error: function, parse_templates: function, apply_one_syllable_template: function, util: table, getfenv: function, debug: table, copy_line: function, macro_apply_templates: function, require: function, apply_line: function, package: table, collectgarbage: function, color_from_style: function, lpeg: table, math: table, string: table, newproxy: function, setmetatable: function, select: function, loadstring: function, unpack: function, getmetatable: function, _G: table, pcall: function
Dialogue: 0,0:00:08.00,0:00:11.00,Default,,0,0,0,fx,getAllKeys(_G.aegisub): __init_clipboard: function, decode_path: function, log: function, parse_karaoke_data: function, register_filter: function, video_size: function, cancel: function, lua_automation_version: number, set_undo_point: function, file_name: function, frame_from_ms: function, register_macro: function, ms_from_frame: function, gettext: function, dialog: table, debug: table, progress: table, keyframes: function, text_extents: function, project_properties: function
Dialogue: 0,0:00:08.00,0:00:11.00,Default,,0,0,0,fx,getAllKeys(_G.aegisub): __init_clipboard: function, decode_path: function, log: function, parse_karaoke_data: function, register_filter: function, video_size: function, cancel: function, lua_automation_version: number, set_undo_point: function, file_name: function, frame_from_ms: function, register_macro: function, ms_from_frame: function, gettext: function, dialog: table, debug: table, progress: table, keyframes: function, text_extents: function, project_properties: function
