[Script Info]
; Script generated by Aegisub 9569-cibuilds-c7145a3f2
; http://www.aegisub.org/
Title: ip君的样式 - v3
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 1920
PlayResY: 1080

[Aegisub Project Garbage]
Last Style Storage: Default
Video File: ?dummy:30.000000:300:1920:1080:255:255:255:
Video AR Value: 1.777778
Video Zoom Percent: 0.375000
Active Line: 11

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: Staff,ipid-ZhuZiCN-TsukuJP-E,92,&H000077FB,&H005BA7FD,&H00FFFFFF,&H008AE6EA,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: Staff黑,ipid-ZhuZiCN-TsukuJP-E,92,&H00555652,&H006E6E6E,&H00FFFFFF,&H00AFAFAF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 个活-鲤鱼,ipid-ZhuZiCN-TsukuJP-E,92,&H00783BF5,&H00A36DE8,&H00FFFFFF,&H00A695FF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 全局阴影,ipid-ZhuZiCN-TsukuJP-E,92,&H00FFFFFF,&H00FFFFFF,&H00FFFFFF,&H96727272,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-全员,ipid-ZhuZiCN-TsukuJP-E,92,&H009B46A5,&H00A256AB,&H00FFFFFF,&H20AE6393,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-千-Nako,ipid-ZhuZiCN-TsukuJP-E,92,&H00783BF5,&H00A87AEE,&H00FFFFFF,&H20BF99FF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-可可-鲤鱼,ipid-ZhuZiCN-TsukuJP-E,92,&H0093A200,&H00B3BC39,&H00FFFFFF,&H50EBF793,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-堇-Pay,ipid-ZhuZiCN-TsukuJP-E,92,&H0000AE43,&H004BBB70,&H00FFFFFF,&H5093FF9E,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-小花-冬毬,ipid-ZhuZiCN-TsukuJP-E,92,&H00BDAB00,&H00CBBD55,&H00FFFFFF,&H20E7DE90,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-希奈子-铃原,ipid-ZhuZiCN-TsukuJP-E,92,&H00009BCE,&H003EAACD,&H00FFFFFF,&H0054C4D5,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-恋-渚,ipid-ZhuZiCN-TsukuJP-E,92,&H00B9110A,&H00C4574D,&H00FFFFFF,&H00D26765,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-注释,ipid-ZhuZiCN-TsukuJP-E,65,&H009B46A5,&H00A256AB,&H00FFFFFF,&H20AE6393,0,0,0,0,100,100,0,0,1,7,4,8,10,10,20,1
Style: 星-结那,ipid-ZhuZiCN-TsukuJP-E,92,&H00C137EF,&H00E18AFF,&H00FFFFFF,&H20FFB9F9,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-芽衣-薮,ipid-ZhuZiCN-TsukuJP-E,92,&H003535FF,&H005D5DFF,&H00FFFFFF,&H207677FF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-若菜四季-大熊,ipid-ZhuZiCN-TsukuJP-E,92,&H006CA600,&H009BC243,&H00FFFFFF,&H20D0E672,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-香音-Sayu,ipid-ZhuZiCN-TsukuJP-E,92,&H001573FF,&H00438FFF,&H00FFFFFF,&H2079AFFF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 星-鬼塚夏美-绘森彩,ipid-ZhuZiCN-TsukuJP-E,92,&H00BF46F9,&H00CB6BFA,&H00FFFFFF,&H20E1A1F4,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 水-渡边曜-朱夏,ipid-ZhuZiCN-TsukuJP-E,92,&H00D29200,&H00D1AC50,&H00FFFFFF,&H50FFC33B,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 水-爱喵,ipid-ZhuZiCN-TsukuJP-E,92,&H00E030A5,&H00E659B7,&H00FFFFFF,&H20E176BD,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-中须霞-麻油鸡,ipid-ZhuZiCN-TsukuJP-E,92,&H00009ED2,&H0053C3E8,&H00FFFFFF,&H008AE6EA,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-侑-妃喵,ipid-ZhuZiCN-TsukuJP-E,92,&H004B524C,&H005F5F5F,&H00FFFFFF,&H002E884E,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-岚珠-菜宝,ipid-ZhuZiCN-TsukuJP-E,92,&H006169FF,&H008F94FE,&H00FFFFFF,&H00B8B7EE,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-果林-miyu碳,ipid-ZhuZiCN-TsukuJP-E,92,&H00D3573C,&H00D17E6C,&H00FFFFFF,&H00FAA275,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-栞子-萌P,ipid-ZhuZiCN-TsukuJP-E,92,&H0062AB06,&H008BB74A,&H00FFFFFF,&H0083CD70,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-步梦-阿兔嘭,ipid-ZhuZiCN-TsukuJP-E,92,&H00783BF5,&H00A175FC,&H00FFFFFF,&H009994FF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-爱-奈酱,ipid-ZhuZiCN-TsukuJP-E,92,&H000058FF,&H003379FF,&H00FFFFFF,&H008D8DFF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-璃奈-切咪,ipid-ZhuZiCN-TsukuJP-E,92,&H00A08577,&H00C1ABA0,&H00FFFFFF,&H00E2CBBF,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-米娅-秀秀,ipid-ZhuZiCN-TsukuJP-E,92,&H0076878B,&H008094A4,&H00FFFFFF,&H0097B2C3,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-艾玛-麻圆,ipid-ZhuZiCN-TsukuJP-E,92,&H0000B735,&H0070B785,&H00FFFFFF,&H0090E5B1,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1
Style: 虹-雫-146,ipid-ZhuZiCN-TsukuJP-E,92,&H00F8A108,&H00F9B339,&H00FFFFFF,&H00FFC09F,0,0,0,0,100,100,0,0,1,12,7,2,10,10,70,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:00.01,Default,,0,0,0,code once, --[[ 参数：额外描边的大小 ]] EB_WIDTH = 3
Comment: 0,0:00:00.00,0:00:00.01,Default,,0,0,0,code once, --[[ 参数：额外阴影的大小比、颜色/透明度 ]] EB_SHADOW_RATIO = 0.7 ; EB_SHADOW_COLOR = [[{\4c&H727272&\4a&H96&}]]
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,code once,local function errMsg(text, okBtn) _G.aegisub.dialog.display({ { class = 'label', label = text, x = 0, y = 0 } }, { okBtn }) _G.error(text) end if _G.aegisub.frame_from_ms(0) == nil then errMsg('【错误】\n\n本卡拉 OK 模板必须在打开视频之后才能运行。\n请打开一个视频后再运行本卡拉 OK 模板。\n如果没有视频，请点击「视频」→「使用空白视频」。\n', '好的，我现在就去打开视频') end local function trim(to_trim) --[[ 这里必须用一个中间变量，不然会返回多个参数 ]] local result = _G.string.gsub(to_trim, '^%s+', ''):gsub('%s+$', '') return result end local function getSpecificVar(targetName) local level = 1 while _G.debug.getinfo(level) ~= nil do local i = 1 while true do local name, value = _G.debug.getlocal(level, i) if name == targetName then return value elseif name == nil then break end i = i + 1 end level = level + 1 end return nil end --[[ 通过 subs 对象获取当前字幕内容（但是获取不到 Format:，不过 accupos（libass）兼容） ]] local function getSubtitleContent(currSubs) local assFile = {} local hasSection = {} local playResX = 0 local playResY = 0 for i = 1, #currSubs do local sub = currSubs[i] if sub.key == 'PlayResX' then playResX = _G.tonumber(sub.value) elseif sub.key == 'PlayResY' then playResY = _G.tonumber(sub.value) end local section = sub.section if not hasSection[section] then _G.table.insert(assFile, '\n' .. section) hasSection[section] = true end local toInsert = sub.raw --[[ 把符合 kara-templater 匹配模板条件的 Comment 替换成 Dialogue ]] if sub.class == 'dialogue' and sub.comment == true and sub.effect:match('[Kk]araoke') then toInsert = _G.string.gsub(toInsert, 'Comment: ', 'Dialogue: ', 1) end if sub.class == 'dialogue' then if trim(sub.text) == '' then toInsert = '' end if _G.aegisub.frame_from_ms(sub.start_time) >= _G.aegisub.frame_from_ms(sub.end_time) then toInsert = '' end end _G.table.insert(assFile, trim(toInsert)) end if playResX == 0 or playResY == 0 then playResX, playResY = _G.aegisub.video_size() end return _G.table.concat(assFile, '\n'), playResX, playResY end local function getPosWithAccupos(assText, playResX, playResY) local ffi = _G.require('ffi') ffi.cdef([[ typedef struct { double pos_x, pos_y; const char *raw; int32_t width, height; int32_t is_positioned; } Accupos_Dialogue; typedef struct Accupos_LibassPrivate Accupos_LibassPrivate; typedef struct { Accupos_LibassPrivate *libass; Accupos_Dialogue *dialogues; int32_t n_dialogues; } Accupos_Library; Accupos_Library *accupos_init( int32_t width, int32_t height, const char *ass_data, int32_t ass_data_len ); void accupos_done(Accupos_Library *lib); ]]) local dll = ffi.load(_G.jit.arch == 'x64' and 'accupos64' or 'accupos32') local accupos = dll.accupos_init(playResX, playResY, assText, #assText) if accupos == nil then errMsg('\n代码出错：accupos_init 返回了 NULL，这表明初始化出错。', '好的，我会给开发者报告错误') end local result = {} local dialogueNum = accupos.n_dialogues for i = 1, dialogueNum do local origD = accupos.dialogues[i - 1] if origD.raw == nil then errMsg(_G.string.format('【代码出错】\n\naccupos->dialogues[%d].raw 为 NULL，这表明 accupos 内部出错了。\n', i - 1), '好的，我会给开发者报告错误') end local d = { raw = ffi.string(origD.raw), posX = origD.pos_x, posY = origD.pos_y, width = origD.width, height = origD.height, isPositioned = (origD.is_positioned ~= 0), } if d.width > 0 and d.height > 0 then _G.table.insert(result, d) end end dll.accupos_done(accupos) return result end local function startsWith(str, pattern) return str:sub(1, #pattern) == pattern end local currSubs = getSpecificVar('subs') local currStyles = getSpecificVar('styles') local assText, playResX, playResY = getSubtitleContent(currSubs) local positions = getPosWithAccupos(assText, playResX, playResY) local globalCounter = 1 local lastIndex = -1 function findMatchingLine(index) --[[ 这里必须用 text_stripped 做判断，因为 libass 也不会输出纯注释行（例：只有一个 {?} 的行） ]] if trim(orgline.text_stripped) == '' then return '' end if _G.aegisub.frame_from_ms(orgline.start_time) >= _G.aegisub.frame_from_ms(orgline.end_time) then return '' end if lastIndex ~= index then local lineRaw = trim(orgline.raw) if startsWith(lineRaw, 'Comment: ') then lineRaw = _G.string.gsub(lineRaw, 'Comment: ', 'Dialogue: ', 1) end while positions[globalCounter].raw ~= lineRaw do globalCounter = globalCounter + 1 if globalCounter > #positions then _G.error(_G.string.format('【代码出错】\n\n重建的字幕文件与实际字幕不匹配。\n当前行为 <%s>，\n在第 %d 行后找不到该行。\n', orgline.raw, lastIndex)) end end lastIndex = index end return '' end function getPos() local p = positions[globalCounter] if p.isPositioned then return '' end local posX = _G.string.format('%.2f', p.posX):gsub('%.?0+$', '') local posY = _G.string.format('%.2f', p.posY):gsub('%.?0+$', '') return _G.string.format([[\pos(%d,%d)]], posX, posY) end function resetMargin() line.margin_l = 0 line.margin_r = 0 line.margin_t = 0 line.margin_b = 0 return '' end function removeBrackets(text) return text:gsub('{', ''):gsub('}', '') end --[[ 通用的 ASS 解析器 ]] local Parser = { VALID_TAGS = { '1a', '1c', '2a', '2c', '3a', '3c', '4a', '4c', 'alpha', 'an', 'a', 'blur', 'bord', 'be', 'b', 'clip', 'c', 'distort', 'fade', 'fscx', 'fscy', 'fsvp', 'fad', 'fax', 'fay', 'frs', 'frx', 'fry', 'frz', 'fsc', 'fsp', 'fe', 'fn', 'fr', 'fs', 'iclip', 'i', 'jitter', 'kf', 'ko', 'kt', 'k', 'movevc', 'mover', 'move', 'org', 'pbo', 'pos', 'p', 'q', 'rnds', 'rndx', 'rndy', 'rndz', 'rnd', 'r', 'shad', 's', 't', 'u', 'xbord', 'xshad', 'ybord', 'yshad', 'z' } } function Parser.tryNumber(x) local y = _G.tonumber(x) if y ~= nil then return y end return x end function Parser.getUtils(text) local i = 1 local function peek() return text:sub(i, i) end local function next(delta) if delta == nil then delta = 1 end local c = peek() i = i + delta return c end local function match(x) return text:sub(i, i + #x - 1) == x end local function remember() return i end local function restore(x) i = x end return peek, next, match, remember, restore end function Parser.Whitespaces(peek, next, match, remember, restore) while true do local c = peek() if c ~= ' ' and c ~= '\t' and c ~= ' ' then break end next() end end function Parser.NonChar(charList, peek, next, match, remember, restore) local output = {} while true do local c = peek() if c == '' then break end local matched = false for i = 1, #charList do if c == charList[i] then matched = true break end end if matched then break end _G.table.insert(output, next()) end if #output == 0 then return nil else return _G.table.concat(output) end end function Parser.TagParamListItem(peek, next, match, remember, restore) Parser.Whitespaces(peek, next, match, remember, restore) local maybeTag = Parser.Tag(peek, next, match, remember, restore) if maybeTag ~= nil then return maybeTag end local normalItem = Parser.NonChar({ ',', ')', '}' }, peek, next, match, remember, restore) if normalItem ~= nil then normalItem = trim(normalItem) end return normalItem end function Parser.TagParamList(peek, next, match, remember, restore) local loc = remember() if peek() ~= '(' then return nil end next() local output = {} while true do local listItem = Parser.TagParamListItem(peek, next, match, remember, restore) _G.table.insert(output, Parser.tryNumber(listItem)) --[[ lua 没法插入 nil，但此处语义和 VSFilter / libass 恰巧一致 ]] if peek() == ',' then next() end Parser.Whitespaces(peek, next, match, remember, restore) local c = peek() if c == ')' or c == '}' or c == '' then break end end if peek() == ')' then next() return output else restore(loc) return nil end end function Parser.Tag(peek, next, match, remember, restore) local loc = remember() if peek() ~= '\\' then return nil, nil end next() Parser.Whitespaces(peek, next, match, remember, restore) local validTagName = nil for i = 1, #Parser.VALID_TAGS do local candidate = Parser.VALID_TAGS[i] if match(candidate) then validTagName = candidate next(#candidate) break end end if validTagName == nil then restore(loc) return nil, nil end Parser.Whitespaces(peek, next, match, remember, restore) local tagParams = Parser.TagParamList(peek, next, match, remember, restore) if tagParams == nil then local singleParam = Parser.NonChar({ ' ', '\\', '}' }, peek, next, match, remember, restore) if singleParam ~= nil then singleParam = trim(singleParam) else singleParam = '' end if singleParam == '' then tagParams = {} else tagParams = { Parser.tryNumber(singleParam) } end end return validTagName, tagParams end function Parser.NonTag(peek, next, match, remember, restore) local output = {} if peek() == '\\' then output = { next() } end local nonTag = Parser.NonChar({ '\\', '}' }, peek, next, match, remember, restore) if nonTag ~= nil then _G.table.insert(output, nonTag) end if #output == 0 then return nil else return _G.table.concat(output) end end function Parser.TagBlock(peek, next, match, remember, restore) local loc = remember() if peek() ~= '{' then return nil end next() local output = {} while true do local tagName, tagParams = Parser.Tag(peek, next, match, remember, restore) local nonTag = nil if tagName ~= nil then _G.table.insert(output, { name = tagName, params = tagParams }) else nonTag = Parser.NonTag(peek, next, match, remember, restore) end if tagName == nil and nonTag == nil then break end end if peek() == '}' then next() return output else restore(loc) return nil end end function Parser.Dialogue(text) local peek, next, match, remember, restore = Parser.getUtils(text) local output = {} Parser.Whitespaces(peek, next, match, remember, restore) while true do local tagBlock = Parser.TagBlock(peek, next, match, remember, restore) if tagBlock ~= nil then _G.table.insert(output, { type = 'block', tags = tagBlock }) else local normalText = Parser.NonChar({ '{' }, peek, next, match, remember, restore) if normalText ~= nil then _G.table.insert(output, { type = 'text', text = normalText }) else break end end end return output end local STYLE_KEY_FOR_TAG = { ['c'] = 'color1', ['1c'] = 'color1', ['2c'] = 'color2', ['3c'] = 'color3', ['4c'] = 'color4', ['1a'] = 'color1', ['2a'] = 'color2', ['3a'] = 'color3', ['4a'] = 'color4', ['bord'] = 'outline', ['shad'] = 'shadow', } local function analyzedParamsForStyleAndTag(st, tagName) local key = STYLE_KEY_FOR_TAG[tagName] if key == nil then return nil end if tagName == 'c' or tagName == '1c' or tagName == '2c' or tagName == '3c' or tagName == '4c' then return { '&H' .. st[key]:sub(5, 10) .. '&' } end if tagName == '1a' or tagName == '2a' or tagName == '3a' or tagName == '4a' then return { '&H' .. st[key]:sub(3, 4) .. '&' } end return { st[key] } end local function transformTagWithStrategies(tagName, tagParams, strategies) if tagName == 'r' then local rTarget = tagParams[1] if rTarget == nil or currStyles[rTarget] == nil then rTarget = '' end local st = line.styleref if rTarget ~= '' then st = currStyles[rTarget] end local transformedOutputs = {} for strategyTagName, strategy in _G.pairs(strategies) do local analyzedParams = analyzedParamsForStyleAndTag(st, strategyTagName) _G.table.insert(transformedOutputs, strategy.func(strategyTagName, analyzedParams, st)) end return '\\r' .. rTarget .. _G.table.concat(transformedOutputs) elseif strategies[tagName] ~= nil then local strategy = strategies[tagName] if strategy.type == 'transform' then if #tagParams == 0 then --[[ ASS 不带参数时参数为样式默认值，试着解析一下 ]] local possibleParam = analyzedParamsForStyleAndTag(line.styleref, tagName) if possibleParam ~= nil then tagParams = possibleParam end end --[[ `func` 返回的是带 \ 的标签内容 ]] return strategy.func(tagName, tagParams) elseif strategy.type == 'discard' then return '' end end return nil end local function parsedTagToString(t) local out = {} _G.table.insert(out, '\\' .. t.name) if #t.params == 0 then --[[ 不需要插入参数 ]] elseif #t.params == 1 then _G.table.insert(out, t.params[1]) else _G.table.insert(out, '(') for k = 1, #t.params do _G.table.insert(out, t.params[k]) if k ~= #t.params then _G.table.insert(out, ',') end end _G.table.insert(out, ')') end return _G.table.concat(out) end local function transformTextWithStrategies(text, strategies) if text:find('{') == nil then --[[ 优化处理速度 ]] return text end local dialogue = Parser.Dialogue(text) local output = {} for i = 1, #dialogue do local blockOrText = dialogue[i] if blockOrText.type == 'text' then _G.table.insert(output, blockOrText.text) else local blockOutput = {} for j = 1, #blockOrText.tags do local tag = blockOrText.tags[j] local newTag = transformTagWithStrategies(tag.name, tag.params, strategies) if newTag ~= nil then _G.table.insert(blockOutput, newTag) else _G.table.insert(blockOutput, parsedTagToString(tag)) end end _G.table.insert(output, '{' .. _G.table.concat(blockOutput) .. '}') end end return _G.table.concat(output) end local DEFAULT_4A = EB_SHADOW_COLOR:match("\\4a&[^&]+&") local DEFAULT_4C = EB_SHADOW_COLOR:match("\\4c&[^&]+&") function layer0Text() return transformTextWithStrategies(orgline.text, { shad = { type = 'transform', func = function(tagName, tagParams) local shad = tagParams[1] return '\\shad' .. (shad * (1 + EB_SHADOW_RATIO) + EB_WIDTH) end }, ['4a'] = { type = 'discard', func = function() return DEFAULT_4A end }, ['4c'] = { type = 'discard', func = function() return DEFAULT_4C end }, }) end function layer1Text() return transformTextWithStrategies(orgline.text, { bord = { type = 'transform', func = function(tagName, tagParams) local bord = tagParams[1] return '\\bord' .. (bord + EB_WIDTH) end }, ['2c'] = { type = 'transform', func = function(tagName, tagParams) return '\\3c' .. tagParams[1] end }, ['3c'] = { type = 'discard', func = function(_, _, targetSt) return '\\3c' .. analyzedParamsForStyleAndTag(targetSt, '2c')[1] end }, }) end function layer2Text() return transformTextWithStrategies(orgline.text, { ['shad'] = { type = 'discard', func = function() return '\\shad0' end }, }) end
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,template line all notext,!findMatchingLine(line.i)!{!getPos()!\shad!line.styleref.shadow * (1+EB_SHADOW_RATIO) + EB_WIDTH!!removeBrackets(EB_SHADOW_COLOR)!}!layer0Text()!!resetMargin()!!relayer(0)!
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,template line all notext,!findMatchingLine(line.i)!{!getPos()!\bord!line.styleref.outline + EB_WIDTH!\3c!line.styleref.color2!}!layer1Text()!!resetMargin()!!relayer(1)!
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,template line all notext,!findMatchingLine(line.i)!{!getPos()!\shad0}!layer2Text()!!resetMargin()!!relayer(2)!
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],使用方法：
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　1. 把 accupos32.dll 和 accupos64.dll 和 automation 文件夹复制到你的 Aegisub.exe 所在位置
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　2. 安装字体：选中两个字体文件，点击右键→”给所有用户安装“
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　3. 新建一个字幕文件
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　4. 点击菜单：文件 -> 配置，把「分辨率」改成 1920x1080
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　5. 点击菜单：字幕 -> 样式管理器 -> 「从脚本中导入」从本 .ass 中导入样式（或者用 Ctrl+C/V 复制粘贴样式）
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　6. 选中最上面的 6 行特效轴，按 Ctrl+C 复制到你的新文件中
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　7. 打轴
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　8. 打完轴后点击“自动化” -> “Apply karaoke template - 应用卡拉 OK 模板” 来添加额外的阴影和描边
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　9. 根据你的喜好修改第 1、2 行的参数（不改动第 3~6 行的代码即可）
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],常见问题：
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（1）上面那段代码是干啥用的？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：用来在原有字幕上，再加一层描边和阴影。额外的描边和阴影可以提高字幕的可读性。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（2）点击“应用卡拉 OK 模板”后，没有任何反应是怎么回事？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：检查一下那两个 .dll 文件复制对了没有。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（3）怎么修改额外的描边的颜色？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：修改样式的“次要颜色”（从左往右数第二个颜色）即可。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（4）我想修改描边大小/阴影大小/描边颜色/文字颜色怎么办？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：如果你修改的不是额外描边和阴影，那直接改样式就可以了。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　如果你要改额外描边的颜色，参考第（3）问；
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　如果你要改额外阴影的颜色，参考第（5）问；
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　如果你要改额外阴影的大小，可以修改第 2 行代码中 EB_SHADOW_RATIO 的值，
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　它表示额外阴影的大小是原样式大小的几倍，比如 0.7 表示额外阴影占 70%。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（5）我想修改额外阴影的颜色和透明度，怎么办？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：找到第 2 行中的 EB_SHADOW_COLOR，鼠标点到代码中的 & 符号所在位置，
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　然后看到文本框上方，有 4 个图标是 AB 的按钮，点第 4 个即可。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（6）我应用卡拉 OK 模板后，又修改了字幕，为什么修改后的字幕没显示？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：你需要再应用一次卡拉 OK 模板，这样修改后的字幕就能显示出来了。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　建议在“设置”→“界面”→“热键”→“总是”里，给“应用卡拉 OK 模板”设个快捷键。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（7）我想关掉额外的描边和阴影，怎么办？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：如果安装了我给的脚本，点击“自动化”菜单→“还原卡拉 OK 特效”即可。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　（8）我有一些字幕，不想加额外的阴影和描边怎么办？
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　答：在“特效”一栏随便填一点东西即可。（只要不填 fx、template、code、karaoke 就行）
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],　　　　　比如：填入“花字”、“特效”等。
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,[说明],
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\fs72\an7\fn微软雅黑\pos(796,184)\b1}示例{\b0}\N如果你弄好了\N那左边应该\N长这样 →
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\fs72\an7\pos(812,696)\fn微软雅黑}如果左边\N长这样 →\N说明你字体\N没装好：
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\fs72\an7\pos(96,114)\fn微软雅黑}这是你实际打轴后的\N效果：
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\an7\p1\c&HFFFFFF&\bord5\shad0\3c&H6F70FF&\pos(93,285.33)}m 0 0 l 635 0 635 439 0 439
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\an7\p1\c&HFFFFFF&\bord5\shad0\3c&H0000F2&\pos(1147,611.33)}m 0 0 l 635 0 635 439 0 439
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\an7\p1\c&HFFFFFF&\bord5\shad0\3c&H15BA00&\pos(1149,85.33)}m 0 0 l 635 0 635 439 0 439
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\fs72\an7\fn微软雅黑\b1\pos(1712,94)\c&H00A819&\4c&H8DCE72&}✓
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,文案,{\fs72\an7\fn微软雅黑\b1\pos(1718,616)\c&H0000FF&\4c&H6566FF&}×
Dialogue: 0,0:00:00.00,0:00:05.00,星-结那,,0,0,0,,{\pos(405.33,409.33)}yuina结那
Dialogue: 0,0:00:00.00,0:00:05.00,星-小花-冬毬,,0,0,0,,{\pos(409.33,537.33)}小花saku
Dialogue: 0,0:00:00.00,0:00:05.00,虹-璃奈-切咪,,0,0,0,,{\pos(409.33,671.33)}虹-璃奈-切咪
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,,{\p1\pos(1459.33,201.33)}m 64 57 l 64 57 65 60b 65 62 64 63 62 63 l 4 63 l 4 63 2 62 1 62l 1 62 1 59b 1 57 2 56 4 56 l 29 56 l 29 51 l 16 51 l 16 51 13 50l 13 50 12 48b 12 46 14 45 16 45 l 29 45 l 29 40 l 16 40 l 16 40 14 43 11 45 9 47 7 49 7 49l 7 49 4 50 3 50l 3 50 1 48 0 47b -0 46 0 44 2 43 l 2 43 4 41 6 39 8 37 9 37l 9 37 10 35 12 32 14 30l 14 30 16 28 16 28l 16 28 19 29 19 29b 21 30 21 32 20 34 l 20 34 l 29 34 l 29 32 l 29 32 30 29 30 29l 30 29 33 28 33 28b 35 28 37 30 37 32 l 37 34 l 56 34 l 56 34 58 35 59 35l 59 35 59 37b 59 39 58 40 56 40 l 37 40 l 37 45 l 52 45 l 52 45 55 46l 55 46 55 48b 55 50 54 51 52 51 l 37 51 l 37 56 l 62 56 l 62 56 64 57 64 57m 9 20 b 9 16 9 11 9 7 l 9 7 10 5 12 2 12 2l 12 2 14 1 17 0 18 0b 25 -0 35 -0 47 0 l 47 0 50 1 53 2 54 2l 54 2 55 5 56 7b 56 10 56 15 56 20 l 56 20 55 23 54 25b 53 27 50 27 48 27 b 38 28 28 28 18 27 b 12 27 9 25 9 20 m 17 11 l 48 11 b 48 10 48 10 48 9 b 48 8 47 7 46 7 b 39 7 30 7 19 7 b 18 7 17 8 17 9 l 17 9 17 11m 17 17 l 17 17 17 19l 17 19 17 20l 17 20 19 21b 25 21 34 21 46 21 b 47 21 48 20 48 19 b 48 18 48 17 48 17 m 98 37 l 98 37 b 94 37 90 37 86 37 b 83 37 80 37 78 37 l 77 37 l 77 37 75 38 74 38l 74 38 73 41 73 41l 73 41 74 44 74 45l 74 45 77 46 78 46b 81 46 83 46 85 46 b 87 46 89 46 91 46 b 92 46 95 46 98 46 l 98 46 l 98 46 100 45 101 45l 101 45 102 42 101 39 101 38l 101 38 98 37 98 37m 172 25 l 148 25 l 148 12 l 148 12 151 11 154 11 157 10 160 9 163 9 164 8l 164 8 166 7 167 5l 167 5 166 2 165 1b 164 0 163 0 161 1 l 161 1 158 1 155 2 152 3 149 3 146 4 143 4 140 5 137 5 134 5 132 6 129 6 126 6 123 6 120 6b 117 6 116 7 116 9 l 116 9 116 12 119 14 120 14b 125 14 132 14 139 13 l 139 25 l 116 25 b 113 25 112 27 112 29 l 112 29 112 31 112 32l 112 32 115 33 116 33l 139 33 l 139 61 b 139 63 140 65 142 65 l 142 65 145 65 146 64l 146 64 148 62 148 61l 148 33 l 172 33 b 174 33 175 32 175 30 l 175 30 175 27 175 27l 175 27 172 25 172 25m 209 37 l 209 37 b 205 37 201 37 197 37 b 194 37 191 37 189 37 l 188 37 l 188 37 186 38 185 38l 185 38 184 41 184 41l 184 41 185 44 185 45l 185 45 188 46 189 46b 192 46 194 46 196 46 b 198 46 200 46 202 46 b 203 46 206 46 209 46 l 209 46 l 209 46 211 45 212 45l 212 45 213 42 212 39 212 38l 212 38 209 37 209 37m 267 3 l 267 3 264 3 262 4l 262 4 261 6 260 8b 261 20 261 32 261 45 b 261 46 260 46 260 45 b 257 42 253 34 246 22 b 242 14 239 9 238 7 l 238 7 236 5 233 4 230 3 229 3l 229 3 226 4 225 6b 224 7 223 9 223 11 b 223 25 223 40 223 56 l 223 56 224 59 227 60l 227 60 230 60 231 60l 231 60 233 58 233 56b 232 41 232 28 232 18 b 232 17 232 16 233 16 b 233 16 233 16 233 17 b 233 17 233 17 234 18 b 236 22 240 28 244 37 b 249 45 253 52 256 57 b 258 60 261 61 264 61 l 264 61 267 60 268 58l 268 58 270 56 270 53b 270 34 270 19 270 8 b 270 5 269 4 267 3 m 315 56 l 315 56 314 58 313 59b 312 61 310 61 308 59 l 308 59 306 57b 306 57 306 57 305 57 l 305 57 303 59 300 60 297 61 294 61 294 61b 289 61 286 60 283 57 l 283 57 282 54 281 52 280 49 280 48b 281 44 283 42 286 40 b 289 39 293 38 300 36 l 300 36 301 36l 301 36 301 35l 301 35 301 32 300 31l 300 31 298 30 297 30l 297 30 294 30 291 31 290 33l 290 33 287 34 286 34l 286 34 284 33 283 33b 282 31 282 29 284 27 l 284 27 286 25 289 24 289 24l 289 24 292 23 295 22 297 22b 307 22 311 28 310 39 l 310 39 310 42 310 45 310 46l 310 46 310 48 311 50l 311 50 314 52 314 52l 314 52 315 55 315 56m 302 44 l 302 44 301 43l 301 43 301 43l 301 43 298 44 295 44l 295 44 292 45 290 46l 290 46 289 49 289 51b 290 52 291 53 294 53 b 297 53 299 52 300 51 b 301 49 302 47 302 44 m 341 40 b 341 40 341 40 341 39 b 341 39 341 39 342 39 b 343 37 347 35 352 31 b 354 30 354 28 353 26 l 353 26 351 24 350 23l 350 23 348 23 346 24b 344 25 342 27 340 29 b 338 31 335 33 333 34 l 333 34 332 35b 331 35 330 35 330 34 b 330 19 331 10 331 7 b 330 5 329 4 327 3 l 327 3 324 3 323 4l 323 4 322 6 322 7b 322 21 322 38 321 56 b 321 59 323 60 325 61 l 325 61 328 61 328 60l 328 60 330 58 330 56b 330 52 330 48 330 44 b 330 44 331 43 331 43 b 332 43 333 43 333 44 b 338 50 343 55 347 59 b 349 61 351 61 353 60 l 353 60 355 58 355 57l 355 57 355 54 354 52b 350 48 345 44 341 40 m 398 42 l 398 42 398 45 397 47 396 50 395 53 393 55 391 57 388 59 385 60 383 61 380 61 377 61 374 61 371 60 368 58 366 56 364 54 362 52 361 49 360 46 360 43 360 42l 360 42 360 39 360 36 361 33 363 30 365 28 365 28l 365 28 367 26 370 24 373 23 376 22 379 22 382 22 384 23 387 24 390 25 392 27 394 30 396 32 397 35 398 38 398 41 398 42m 389 42 l 389 42 389 39 388 36 386 33 386 33l 386 33 384 31 381 30 379 30l 379 30 376 31 373 32 371 33l 371 33 370 36 369 39 368 41 369 44 370 47 371 50 371 50l 371 50 374 52 377 53 379 53l 379 53 382 52 385 51 386 50l 386 50 388 47 389 45 389 42 389 42
Dialogue: 0,0:00:00.00,0:00:05.00,星-可可-鲤鱼,,0,0,0,,{\p1\pos(1465.33,335.33)}m 64 59 l 64 59 65 62b 65 64 64 65 62 65 l 4 65 l 4 65 2 64 1 64l 1 64 1 61b 1 59 2 58 4 58 l 29 58 l 29 53 l 16 53 l 16 53 13 52l 13 52 12 50b 12 48 14 47 16 47 l 29 47 l 29 43 l 16 43 l 16 43 14 45 11 47 9 49 7 51 7 51l 7 51 4 52 3 52l 3 52 1 50 0 49b -0 48 0 47 2 45 l 2 45 4 44 6 42 8 39 9 39l 9 39 10 37 12 35 14 32l 14 32 16 31 16 30l 16 30 19 31 19 31b 21 32 21 34 20 36 l 20 36 l 29 36 l 29 34 l 29 34 30 31 30 31l 30 31 33 30 33 30b 35 31 37 32 37 34 l 37 36 l 56 36 l 56 36 58 37 59 37l 59 37 59 40b 59 41 58 42 56 43 l 37 43 l 37 47 l 52 47 l 52 47 55 48l 55 48 55 51b 55 52 54 53 52 53 l 37 53 l 37 58 l 62 58 l 62 58 64 59 64 59m 9 22 b 9 18 9 14 9 10 l 9 10 10 7 12 4 12 4l 12 4 14 3 17 2 18 2b 25 2 35 2 47 2 l 47 2 50 3 53 4 54 5l 54 5 55 7 56 9b 56 13 56 17 56 22 l 56 22 55 25 54 27b 53 29 50 30 48 30 b 38 30 28 30 18 30 b 12 30 9 27 9 22 m 17 13 l 48 13 b 48 13 48 12 48 11 b 48 10 47 9 46 9 b 39 9 30 9 19 9 b 18 9 17 10 17 11 l 17 11 17 13m 17 19 l 17 19 17 21l 17 21 17 23l 17 23 19 23b 25 23 34 23 46 23 b 47 23 48 22 48 21 b 48 20 48 20 48 19 m 98 39 l 98 39 b 94 39 90 39 86 39 b 83 39 80 39 78 39 l 77 39 l 77 39 75 40 74 40l 74 40 73 43 73 44l 73 44 74 46 74 47l 74 47 77 48 78 48b 81 48 83 48 85 48 b 87 48 89 48 91 48 b 92 48 95 48 98 48 l 98 48 l 98 48 100 47 101 47l 101 47 102 44 101 41 101 40l 101 40 98 39 98 39m 141 49 b 137 49 132 49 126 49 l 126 49 123 48 121 46l 121 46 120 44 119 41l 119 41 119 38 119 35 119 32 119 29 119 27l 119 27 120 24 121 23l 121 23 123 21 126 21l 126 21 129 20 132 20 135 20 138 20 141 21 141 21l 141 21 144 21 147 22l 147 22 148 25 149 27l 149 27 149 30 149 33 149 36 149 39 149 41b 148 46 146 48 141 49 m 141 30 b 141 28 140 28 138 28 b 135 28 132 28 129 28 b 128 28 127 28 127 30 b 127 33 127 36 127 39 b 127 40 128 41 129 41 l 129 41 132 41 135 41 138 41 139 41l 139 41 140 41l 140 41 141 39b 141 37 141 33 141 30 m 172 6 l 115 6 b 113 6 111 7 111 9 l 111 9 112 12 114 14 115 14l 157 14 b 157 27 157 40 157 53 b 157 58 153 59 144 58 b 142 58 140 59 140 60 l 140 60 140 63 140 64l 140 64 142 66 143 66b 152 67 158 66 161 64 b 165 62 166 58 166 55 l 166 43 b 166 36 166 27 166 14 l 172 14 b 175 14 176 12 176 10 l 176 10 175 8 175 7l 175 7 172 6 172 6m 247 6 l 190 6 b 187 6 186 7 186 9 l 186 9 186 12 189 14 190 14l 232 14 b 232 27 232 40 232 53 b 232 58 228 59 219 58 b 217 58 215 59 214 60 l 214 60 214 63 215 64l 215 64 217 66 218 66b 227 67 233 66 236 64 b 239 62 241 58 241 55 l 241 43 b 240 36 240 27 241 14 l 247 14 b 249 14 251 12 251 10 l 251 10 250 8 250 7l 250 7 247 6 247 6m 216 49 b 212 49 207 49 201 49 l 201 49 198 48 196 46l 196 46 194 44 194 41l 194 41 194 38 194 35 194 32 194 29 194 27l 194 27 195 24 196 23l 196 23 198 21 201 21l 201 21 204 20 207 20 210 20 213 20 216 21 216 21l 216 21 219 21 221 22l 221 22 223 25 224 27l 224 27 224 30 224 33 224 36 224 39 224 41b 223 46 221 48 216 49 m 215 30 b 215 28 215 28 213 28 b 210 28 207 28 204 28 b 203 28 202 28 202 30 b 202 33 202 36 202 39 b 202 40 203 41 204 41 l 204 41 207 41 210 41 213 41 213 41l 213 41 215 41l 215 41 215 39b 216 37 216 33 215 30 m 284 39 l 283 39 b 280 39 276 39 272 39 b 269 39 266 39 263 39 l 263 39 l 263 39 261 40 260 40l 260 40 259 43 259 44l 259 44 260 46 260 47l 260 47 263 48 263 48b 266 48 269 48 271 48 b 273 48 275 48 276 48 b 278 48 281 48 283 48 l 284 48 l 284 48 286 47 287 47l 287 47 288 44 287 41 287 40l 287 40 284 39 284 39m 363 60 l 363 60 364 62l 364 62 363 65l 363 65 360 66l 325 66 l 325 66 323 65l 323 65 322 62l 322 62 322 60 325 59l 339 59 l 339 52 l 330 52 l 330 52 327 51 327 51l 327 51 326 48l 326 48 327 46l 327 46 330 45 330 45l 339 45 l 339 38 l 334 38 b 330 38 327 35 327 31 b 326 24 326 17 327 10 l 327 10 327 7 329 5l 329 5 332 3 334 3b 340 2 345 2 351 3 l 351 3 354 3 356 5l 356 5 358 7 358 10b 359 17 359 24 358 30 l 358 30 358 33 356 36 354 38 351 38l 346 38 l 346 45 l 355 45 l 355 45 358 46 359 48l 359 48 358 51l 358 51 355 52 355 52l 346 52 l 346 59 l 360 59 l 360 59 363 60m 346 17 l 352 17 b 352 14 352 13 351 12 l 351 12 351 10l 351 10 349 9l 346 9 m 346 32 b 347 32 348 32 349 32 b 351 32 351 31 351 29 b 352 28 352 26 352 23 l 346 23 m 339 23 l 333 23 b 333 25 334 27 334 29 l 334 29 335 31 336 32b 337 32 338 32 339 32 m 339 9 b 338 9 337 9 336 9 l 336 9 334 10 334 12b 334 14 333 16 333 17 l 339 17 m 295 23 l 295 23 295 20 295 19l 295 19 297 17 298 14 300 12 301 9 302 6 303 3 303 3l 303 3 305 0 305 0l 305 0 308 0 308 0l 308 0 310 2 310 4l 310 4 309 6b 312 6 314 6 314 6 l 314 6 317 7 318 8l 318 8 319 10 319 12l 319 12 318 15 317 17 316 19l 316 19 317 19b 320 20 322 22 323 26 b 323 31 323 37 323 42 b 323 47 320 49 316 50 l 316 50 313 50 310 50 307 50 305 50l 305 50 302 49 300 48l 300 48 298 45 298 42b 298 39 298 33 298 26 l 298 26 298 25l 298 25 296 25l 296 25 295 23m 308 37 l 304 37 b 304 38 304 40 304 41 l 304 41 306 43 307 43l 307 43 308 43m 308 26 l 307 26 l 307 26 304 27 304 28b 304 29 304 30 304 31 l 308 31 m 313 31 l 316 31 b 316 30 316 29 316 28 l 316 28 315 26 314 26l 314 26 313 26m 313 43 l 313 43 314 43l 314 43 316 42 316 41l 316 37 l 313 37 m 304 19 l 304 19 305 19b 307 19 308 19 309 19 l 309 19 311 16 312 14b 312 13 312 13 311 12 b 309 12 308 12 307 13 l 307 13 306 15 304 18 304 19m 324 56 l 324 56 324 54l 324 54 323 52l 323 52 320 52 320 52l 320 52 317 53 314 54 311 54 308 55 305 56 303 56 300 57 298 57l 298 57 296 58 295 59l 295 59 295 62 295 62b 295 64 297 65 300 65 b 306 64 313 62 322 58 l 322 58 324 57 324 56m 438 60 l 438 60 436 59l 373 59 l 373 59 371 60l 371 60 370 63l 370 63 371 65l 371 65 373 66l 436 66 l 436 66 438 65l 438 65 438 62l 438 62 438 60m 371 28 l 371 28 370 25 370 25l 370 25 371 22 372 22l 372 22 374 20 377 19 379 17 381 15 384 13 386 10 387 8 389 6 391 3 391 2l 391 2 394 0 394 0l 394 0 397 1 397 1l 397 1 399 3l 399 3 399 6 399 6l 399 6 398 7b 402 7 406 7 411 7 l 411 7 414 8 416 9b 417 11 417 12 416 14 l 416 14 414 17 412 19 411 20l 418 20 l 418 20 421 20 423 22 424 22l 424 22 426 25 427 27 427 28b 427 32 427 38 427 45 l 427 45 426 47 425 50 424 51l 424 51 422 52 419 53 419 53b 409 53 399 53 390 53 l 390 53 388 53 385 51 385 51l 385 51 383 48 382 46 382 44b 382 38 382 33 382 28 l 382 28 383 26 383 24b 381 26 379 27 377 28 b 374 30 372 30 371 28 m 400 40 l 390 40 b 390 40 390 41 390 43 b 390 45 391 46 393 46 b 397 46 399 46 400 46 m 400 27 b 398 27 396 27 393 27 l 393 27 391 28 390 30b 390 31 390 32 390 33 l 400 33 m 408 33 l 418 33 b 418 32 418 32 418 31 b 418 29 417 27 415 27 b 413 27 411 27 408 27 m 408 46 l 415 46 b 417 46 418 45 418 43 b 418 42 418 41 418 40 l 408 40 m 387 21 l 387 21 390 20 390 20b 395 20 399 20 402 20 l 402 20 404 18 406 15b 406 15 406 15 406 14 l 406 14 405 14b 402 14 398 14 393 14 l 393 14 391 16 389 18 387 21 387 21
Dialogue: 0,0:00:00.00,0:00:05.00,虹-璃奈-切咪,,0,0,0,,{\p1\pos(1463.33,465.33)}m 67 58 l 67 58 68 61b 68 63 66 64 64 64 l 29 64 l 29 64 26 63 25 63l 25 63 25 60 25 60b 25 58 26 57 29 57 l 42 57 l 42 15 l 33 15 l 33 15 30 14 30 14l 30 14 29 11 29 11b 29 9 31 8 33 8 l 61 8 l 61 8 64 9 64 9l 64 9 65 12 65 12b 65 14 63 15 61 15 l 50 15 l 50 57 l 64 57 l 64 57 67 58 67 58m 27 54 l 27 54 24 55 21 57 18 58 16 59 13 59 10 60 7 61 5 61b 3 62 2 62 1 61 l 1 61 -0 58 0 57b 0 56 1 55 3 54 b 6 54 9 53 12 52 l 12 42 l 10 41 l 10 41 7 41 5 40l 5 40 3 37 3 35b 3 32 3 28 3 21 l 3 21 3 18 5 15l 5 15 7 14 10 13b 10 13 11 13 12 13 l 12 5 l 12 5 13 2 16 1 17 1b 19 1 20 3 20 5 l 20 13 b 22 13 23 13 23 13 l 23 13 26 14 28 15l 28 15 30 18 30 20b 30 26 30 31 30 34 l 30 34 30 37 28 39l 28 39 26 41 23 41b 22 41 21 41 20 41 l 20 50 b 22 49 23 49 24 49 l 24 49 24 48b 23 46 23 44 24 43 b 26 42 27 42 29 44 l 29 44 31 46 32 49 33 51l 33 51 34 54 33 55l 33 55 31 57 30 57b 29 57 28 56 27 54 m 13 20 b 12 20 12 20 11 20 l 11 20 9 22l 9 22 9 25 9 28 9 31 9 33l 9 33 11 35b 12 35 12 35 13 35 m 20 35 b 20 35 21 35 22 35 l 22 35 24 33b 24 30 24 27 24 22 l 24 22 22 20b 21 20 21 20 20 20 m 99 39 l 99 39 b 96 39 92 39 88 39 b 85 39 82 39 79 39 l 79 39 l 79 39 76 40 76 41l 76 41 75 44 75 44l 75 44 76 47 76 47l 76 47 79 49 79 49b 82 49 85 49 87 49 b 89 49 90 49 92 49 b 94 49 96 49 99 49 l 99 49 l 99 49 102 48 103 47l 103 47 104 45 103 42 103 41l 103 41 100 39 99 39m 147 26 l 147 26 148 28l 148 28 151 28l 151 28 154 27 156 26 157 25b 158 26 159 27 159 27 b 161 28 162 28 163 28 l 163 28 164 26l 164 26 163 23b 162 22 162 22 161 21 b 162 20 163 19 164 18 b 164 17 164 16 163 15 l 163 15 160 15 159 15l 159 15 157 18 157 18l 157 18 154 17 152 16b 151 16 149 16 149 18 b 148 19 148 20 150 20 b 151 21 152 21 153 22 l 153 22 150 23 149 24b 147 24 147 25 147 26 m 176 44 l 176 44 175 41 174 40l 174 40 172 38 169 38 169 38b 166 38 162 38 157 38 b 157 37 157 37 158 35 l 158 35 b 160 35 162 35 165 35 b 168 35 170 34 171 33 b 172 32 172 30 173 28 l 173 28 173 25 173 22 173 19b 172 17 171 16 170 15 l 170 15 167 16l 167 16 166 19b 166 23 166 26 166 27 b 166 29 165 29 163 29 l 163 29 160 30 158 30 155 30 152 30 149 30 148 29l 148 29 146 29l 146 29 146 27b 146 25 146 22 146 19 b 146 17 145 16 143 16 l 143 16 140 16l 140 16 139 19b 139 22 139 25 139 28 l 139 28 140 31 141 33b 142 34 144 35 147 35 l 151 35 b 151 36 150 37 150 38 b 147 38 144 38 142 38 l 142 38 139 38 138 40l 138 40 136 42 136 44b 136 51 136 58 136 64 b 136 66 137 68 139 68 l 139 68 142 67l 142 67 143 64 143 64b 143 58 143 52 143 46 l 143 46 144 44l 144 44 145 43b 146 43 147 43 149 43 b 148 45 147 47 147 48 l 147 48 146 51 145 52l 145 52 144 55 145 56l 145 56 147 57 148 57l 148 57 151 57 154 56 157 56 159 55 162 54 163 54l 163 54 163 55b 164 56 165 57 166 56 l 166 56 168 54l 168 54 168 52l 168 52 166 49 164 47 162 45b 161 44 160 44 158 45 b 157 46 158 47 159 48 l 159 48 160 50b 157 50 155 51 154 51 b 153 51 153 51 153 51 b 153 51 153 50 153 50 b 154 49 154 46 155 43 b 158 43 162 43 166 43 b 168 44 169 44 169 46 l 169 46 169 49 169 52 169 55 169 57b 169 59 168 60 168 60 l 168 60 165 59 165 59b 163 59 161 60 161 61 l 161 61 161 64 161 64l 161 64 163 66 164 66b 168 67 171 67 173 65 l 173 65 175 63 176 60 176 59b 176 57 176 56 176 55 b 176 49 176 46 176 44 m 134 42 l 134 42 131 42b 130 42 129 43 128 43 l 128 32 l 132 32 l 132 32 134 30 135 29l 135 29 134 26l 134 26 132 24l 128 24 l 128 14 l 133 14 l 133 14 135 13 136 11l 136 11 135 8 135 8l 135 8 133 7 133 7l 116 7 b 114 7 113 8 113 10 l 113 10 114 13l 114 13 116 14 116 14l 121 14 l 121 25 l 117 24 b 115 25 114 26 114 27 l 114 27 114 30 114 30l 114 30 117 32 117 32l 121 32 l 121 46 b 120 47 118 47 115 48 l 115 48 113 50 112 51l 112 51 113 54 114 55b 115 56 116 56 118 55 l 118 55 121 54 123 53 126 52 129 51 131 49 134 48b 135 47 136 45 135 44 l 135 44 134 42m 174 8 l 160 8 l 160 4 l 160 4 158 1 156 0l 156 0 153 0 153 1l 153 1 151 3 151 4l 151 8 l 139 8 b 137 8 136 9 136 10 l 136 10 137 13l 137 13 139 14 139 14l 174 14 b 176 14 177 13 177 11 l 177 11 176 9l 176 9 174 8m 253 32 l 253 32 253 35 253 36b 252 38 250 38 247 37 l 247 37 244 36 241 35 239 33 236 32 234 30 232 28 231 27l 231 27 232 30 231 31l 231 31 229 33 228 33l 212 33 l 212 33 209 32 209 31l 209 31 208 28 208 28l 208 28 206 30 204 32 201 34 199 36 196 37 193 38 193 39l 193 39 190 39 188 38l 188 38 186 36 186 35b 186 33 187 32 189 31 l 189 31 192 30 195 29 197 27 200 26 202 24 204 21 206 19 208 17l 193 18 l 193 18 190 17 190 16l 190 16 189 14 189 13b 189 11 190 10 193 10 l 212 10 l 212 10 213 7 214 5 214 3l 214 3 215 1 216 0l 216 0 219 0 220 1b 222 1 223 3 223 5 b 222 7 221 8 221 10 l 247 10 l 247 10 249 11 250 12l 250 12 251 14 251 15b 250 16 249 17 247 18 l 232 17 l 232 17 234 20 236 22 239 23 241 25 244 27 246 28 249 29 250 29b 252 30 253 31 253 32 m 230 26 l 230 26 228 24 226 22 224 19 223 17l 220 17 l 217 17 l 217 17 215 20 214 22 212 25 211 26l 211 26 212 26l 228 26 l 228 26 230 26m 234 48 b 232 47 230 48 229 50 l 229 50 228 52 230 55 231 55l 231 55 233 56 236 58 238 59 241 61 242 62b 244 64 245 65 247 63 l 247 63 249 61 249 60l 249 60 249 57 248 56l 248 56 245 54 243 53 240 51 238 50 235 48 234 48m 209 54 b 210 52 210 50 209 48 l 209 48 206 47 206 47l 206 47 203 48 203 48l 203 48 201 51 199 53 196 55 193 56 192 57b 190 58 189 59 189 61 l 189 61 191 63 191 64l 191 64 194 64 196 64l 196 64 198 63 201 61 203 60l 203 60 205 58 207 56 209 54m 224 45 l 242 45 b 244 45 246 44 246 42 l 246 42 245 39l 245 39 242 38 242 38l 199 38 b 196 38 195 39 195 41 l 195 41 196 44l 196 44 198 45 199 45l 216 45 l 216 55 b 216 57 216 58 214 59 b 213 60 211 60 209 59 b 206 59 205 60 204 61 l 204 61 204 64 204 65l 204 65 207 67 208 67b 213 68 218 67 220 65 b 223 63 224 60 224 56 l 224 49 m 285 39 l 285 39 b 281 39 278 39 274 39 b 271 39 268 39 265 39 l 265 39 l 265 39 262 40 262 41l 262 41 261 44 261 44l 261 44 262 47 262 47l 262 47 264 49 265 49b 268 49 271 49 273 49 b 274 49 276 49 278 49 b 280 49 282 49 285 49 l 285 49 l 285 49 288 48 289 47l 289 47 290 45 289 42 289 41l 289 41 286 39 285 39m 359 10 l 359 10 357 8 354 7 353 7b 342 7 333 7 328 7 b 325 8 324 9 324 11 l 324 11 325 14l 325 14 328 15 328 15b 331 15 334 15 337 15 b 337 26 336 34 334 40 l 334 40 333 43 331 45 330 48 328 50 326 52 323 54 321 56 318 58 318 58b 316 59 315 60 315 62 l 315 62 317 65 318 65l 318 65 321 66 322 65l 322 65 325 64 327 62 330 60 332 58 334 56 334 56l 334 56 336 54 338 51 339 48 341 46 341 44l 341 44 342 41 343 38 344 35 344 32 344 30b 345 26 345 21 345 15 l 351 15 l 351 15 353 16 353 17b 354 32 353 43 352 49 b 350 53 349 55 347 56 b 345 57 343 57 340 56 b 337 55 335 56 335 58 l 335 58 334 60 334 61l 334 61 336 63 337 64b 343 66 347 65 352 63 b 356 61 359 57 360 50 b 362 44 362 32 362 16 l 362 16 361 13 360 11 359 10m 328 39 l 328 39 326 38 324 38b 322 39 319 41 316 42 b 315 42 315 42 315 42 b 314 42 314 42 314 41 b 314 38 314 33 314 27 l 325 25 l 325 25 328 23 328 22l 328 22 327 19 327 19l 327 19 324 18 324 18l 314 20 l 314 5 b 314 3 313 2 311 1 l 311 1 308 2 308 2l 308 2 306 5 306 5b 306 11 306 16 306 22 l 299 23 l 299 23 297 25 296 26l 296 26 297 29 297 29l 297 29 300 30 301 30l 306 29 b 306 35 306 41 306 46 l 306 46 307 49 308 51b 310 52 312 52 314 51 l 314 51 317 50 319 49 322 47 324 46 327 44 327 44l 327 44 329 42 328 39m 404 21 l 404 21 406 23 407 24l 407 24 409 23 410 23b 412 22 412 20 411 17 l 411 17 410 14 408 12 408 11l 408 11 406 9 403 7 403 7l 403 7 401 7 398 8l 398 8 397 10 397 11l 397 11 398 13 398 14l 398 14 400 16 402 18 404 21 404 21m 431 23 l 431 23 433 20 435 18 437 16 439 13 439 13l 439 13 440 10 440 9l 440 9 438 7 438 7l 438 7 436 6 435 6l 435 6 432 7 432 8l 432 8 430 10 429 13 427 15 425 17l 425 17 424 19 424 20l 424 20 425 23b 427 24 429 24 431 23 m 388 50 l 388 50 385 50 382 50 381 50l 381 50 378 49 376 48l 376 48 375 45 374 43l 374 16 l 374 16 375 13 376 10 379 9 381 9l 381 9 384 8 387 8 388 9l 388 9 391 9 393 10l 393 10 395 13 395 15b 396 24 396 34 395 43 b 395 47 393 50 388 50 m 388 17 l 388 17 386 16l 386 16 383 16l 383 16 382 17b 382 24 382 32 382 41 l 382 41 382 42l 382 42 384 43l 384 43 386 43l 386 43 388 41 388 41b 388 33 388 25 388 17 m 440 53 l 440 53 438 51 435 49 434 47 432 44 430 42 428 39 427 37 425 34 425 34l 435 34 l 435 34 438 33 438 32l 438 32 439 30 439 30l 439 30 438 27l 438 27 435 26l 422 26 l 422 4 l 422 4 421 1 421 1l 421 1 418 0 418 0l 418 0 415 1 415 1l 415 1 414 4 414 4l 414 26 l 401 26 l 401 26 398 27 398 27l 398 27 397 29l 397 29 398 32 398 32l 398 32 401 34 401 34l 410 34 l 410 34 409 36 407 39 405 41 403 43 401 46 399 48 397 50 395 52 392 53 391 54l 391 54 390 56 389 57l 389 57 390 60 390 61l 390 61 393 62 393 62l 393 62 396 62 397 61l 397 61 400 59 402 57 404 55 406 53 408 51 410 48 411 46 413 43 414 42l 414 65 l 414 65 415 67 415 68l 415 68 418 68 418 68l 418 68 421 67l 421 67 422 65l 422 42 l 422 42 423 44 424 47 426 50 427 52 429 55 431 57 433 59 433 60l 433 60 436 62 437 62l 437 62 440 60 440 60l 440 60 441 57 441 57l 441 57 440 54 440 53
Dialogue: 0,0:00:00.00,0:00:05.00,星-千-Nako,,0,0,0,,{\fn随便一个*绝*对*不正确的字体\pos(1455.33,745.33)}星-千-Nako
Dialogue: 0,0:00:00.00,0:00:05.00,星-可可-鲤鱼,,0,0,0,,{\fn随便一个*绝*对*不正确的字体\pos(1459.33,875.33)}星-可可-鲤鱼
Dialogue: 0,0:00:00.00,0:00:05.00,虹-璃奈-切咪,,0,0,0,,{\fn随便一个*绝*对*不正确的字体\pos(1461.33,1001.33)}虹-璃奈-切咪
